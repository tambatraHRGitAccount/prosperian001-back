const axios = require('axios');

/**
 * Script de test pour d√©montrer l'utilisation du sessionId LinkedIn Sales Navigator
 * Bas√© sur la documentation officielle LinkedIn Sales Navigator
 */

async function testSessionIdExtraction() {
  console.log('üîç Test d\'extraction du SessionId LinkedIn Sales Navigator\n');

  try {
    // Exemple d'URL LinkedIn Sales Navigator avec sessionId
    const sampleUrl = 'https://www.linkedin.com/sales/search/people?query=(spellCorrectionEnabled:true,filters:List((type:CURRENT_COMPANY,values:List((id:urn:li:organization:825160,text:"Hyundai Motor Company",selectionType:INCLUDED)))))&sessionId=oyT4SvXfQXWQEbOH54crEQ%3D%3D';

    console.log('üìù URL d\'exemple:');
    console.log(sampleUrl);
    console.log('\n');

    // Test 1: Extraire le sessionId
    console.log('1. Extraction du sessionId...');
    const extractResponse = await axios.post('http://localhost:4000/api/linkedin-sales/extract-session', {
      url: sampleUrl
    });

    if (extractResponse.data.success) {
      console.log('‚úÖ SessionId extrait:', extractResponse.data.sessionId);
      console.log('üîì SessionId d√©cod√©:', extractResponse.data.decodedSessionId);
      console.log('üìù Message:', extractResponse.data.message);
    } else {
      console.log('‚ùå Erreur:', extractResponse.data.error);
    }

    console.log('\n');

    // Test 2: G√©n√©rer une nouvelle URL avec le sessionId extrait
    console.log('2. G√©n√©ration d\'une nouvelle URL avec le sessionId...');
    const sessionId = extractResponse.data.sessionId;
    
    const generateResponse = await axios.post('http://localhost:4000/api/linkedin-sales/generate-url-with-session', {
      searchType: 'people',
      keywords: 'd√©veloppeur',
      filters: [
        {
          type: 'CURRENT_COMPANY',
          values: [
            {
              id: 'urn:li:organization:825160',
              text: 'Hyundai Motor Company',
              selectionType: 'INCLUDED'
            }
          ]
        }
      ],
      sessionId: sessionId
    });

    if (generateResponse.data.success) {
      console.log('‚úÖ Nouvelle URL g√©n√©r√©e:');
      console.log(generateResponse.data.url);
      console.log('üìù Message:', generateResponse.data.message);
    } else {
      console.log('‚ùå Erreur:', generateResponse.data.error);
    }

    console.log('\n');

    // Test 3: Comparaison des URLs
    console.log('3. Comparaison des URLs:');
    console.log('üîó URL originale:', sampleUrl);
    console.log('üÜï URL g√©n√©r√©e:', generateResponse.data.url);
    console.log('‚úÖ Les URLs sont √©quivalentes:', sampleUrl === generateResponse.data.url);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
  }
}

async function testSessionIdValidation() {
  console.log('\nüîç Test de validation du SessionId\n');

  try {
    // Test avec diff√©rents formats de sessionId
    const testCases = [
      {
        name: 'SessionId valide',
        sessionId: 'oyT4SvXfQXWQEbOH54crEQ%3D%3D'
      },
      {
        name: 'SessionId d√©cod√©',
        sessionId: 'oyT4SvXfQXWQEbOH54crEQ=='
      },
      {
        name: 'SessionId court',
        sessionId: 'abc123'
      }
    ];

    for (const testCase of testCases) {
      console.log(`üìù Test: ${testCase.name}`);
      
      const response = await axios.post('http://localhost:4000/api/linkedin-sales/generate-url-with-session', {
        searchType: 'people',
        keywords: 'test',
        sessionId: testCase.sessionId
      });

      if (response.data.success) {
        console.log('‚úÖ Succ√®s - URL g√©n√©r√©e');
        console.log('üîó URL:', response.data.url.substring(0, 100) + '...');
      } else {
        console.log('‚ùå Erreur:', response.data.error);
      }
      console.log('');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test de validation:', error.response?.data || error.message);
  }
}

async function demonstrateSessionIdUsage() {
  console.log('\nüìö D√©monstration d\'utilisation du SessionId\n');

  console.log('üéØ Comment obtenir un SessionId LinkedIn Sales Navigator:');
  console.log('');
  console.log('1. üåê Connectez-vous √† LinkedIn Sales Navigator');
  console.log('   URL: https://www.linkedin.com/sales/');
  console.log('');
  console.log('2. üîç Effectuez une recherche (prospects ou entreprises)');
  console.log('');
  console.log('3. üìã Copiez l\'URL compl√®te de votre navigateur');
  console.log('   Exemple: https://www.linkedin.com/sales/search/people?query=...&sessionId=oyT4SvXfQXWQEbOH54crEQ%3D%3D');
  console.log('');
  console.log('4. üîß Utilisez notre API pour extraire le sessionId:');
  console.log('   POST /api/linkedin-sales/extract-session');
  console.log('');
  console.log('5. üöÄ G√©n√©rez de nouvelles URLs avec le sessionId:');
  console.log('   POST /api/linkedin-sales/generate-url-with-session');
  console.log('');
  console.log('üí° Avantages du SessionId:');
  console.log('   - Acc√®s aux fonctionnalit√©s premium de Sales Navigator');
  console.log('   - Persistance de la session utilisateur');
  console.log('   - Acc√®s aux donn√©es enrichies');
  console.log('   - Fonctionnalit√©s de scraping avanc√©es');
  console.log('');
  console.log('‚ö†Ô∏è  Important:');
  console.log('   - Le sessionId expire apr√®s un certain temps');
  console.log('   - Chaque utilisateur a son propre sessionId');
  console.log('   - Respectez les conditions d\'utilisation de LinkedIn');
}

// Ex√©cution des tests
async function runAllTests() {
  console.log('üöÄ Tests LinkedIn Sales Navigator SessionId\n');
  console.log('=' .repeat(60));
  
  await testSessionIdExtraction();
  await testSessionIdValidation();
  await demonstrateSessionIdUsage();
  
  console.log('=' .repeat(60));
  console.log('‚úÖ Tous les tests sont termin√©s !');
}

// Lancer les tests si le script est ex√©cut√© directement
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  testSessionIdExtraction,
  testSessionIdValidation,
  demonstrateSessionIdUsage,
  runAllTests
}; 