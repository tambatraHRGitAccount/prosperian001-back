// Script de test pour v√©rifier que les filtres vides fonctionnent correctement
// Usage: node test-empty-filters.js

const axios = require('axios');

const BASE_URL = 'http://localhost:4000';

async function testEmptyFilters() {
  console.log('üß™ Test des filtres vides et comportement par d√©faut');
  console.log('==================================================\n');

  try {
    // Test 1: Aucun param√®tre (comportement par d√©faut)
    console.log('üìã Test 1: Aucun param√®tre de filtre');
    const response1 = await axios.get(`${BASE_URL}/api/pronto/workflow/global-results?limit=5`);
    
    console.log('‚úÖ R√©ponse re√ßue:');
    console.log(`   - Statut: ${response1.status}`);
    console.log(`   - Leads totaux: ${response1.data.total_leads}`);
    console.log(`   - Leads filtr√©s: ${response1.data.filtered_leads}`);
    console.log(`   - Message: ${response1.data.message}`);
    console.log(`   - Filtres appliqu√©s:`, response1.data.applied_filters);

    // Test 2: Param√®tres vides explicites
    console.log('\nüìã Test 2: Param√®tres de filtre vides explicites');
    const response2 = await axios.get(`${BASE_URL}/api/pronto/workflow/global-results`, {
      params: {
        company_filter: '',
        title_filter: '',
        lead_location_filter: '',
        employee_range_filter: '',
        company_location_filter: '',
        industry_filter: '',
        limit: 5
      }
    });
    
    console.log('‚úÖ R√©ponse re√ßue:');
    console.log(`   - Leads totaux: ${response2.data.total_leads}`);
    console.log(`   - Leads filtr√©s: ${response2.data.filtered_leads}`);
    console.log(`   - Message: ${response2.data.message}`);
    console.log(`   - Tous les filtres vides:`, response2.data.applied_filters);

    // Test 3: M√©lange de filtres vides et non vides
    console.log('\nüìã Test 3: M√©lange de filtres vides et non vides');
    const response3 = await axios.get(`${BASE_URL}/api/pronto/workflow/global-results`, {
      params: {
        company_filter: 'Google',
        title_filter: '',
        lead_location_filter: '',
        employee_range_filter: '',
        company_location_filter: '',
        industry_filter: 'Technology',
        limit: 5
      }
    });
    
    console.log('‚úÖ R√©ponse re√ßue:');
    console.log(`   - Leads totaux: ${response3.data.total_leads}`);
    console.log(`   - Leads filtr√©s: ${response3.data.filtered_leads}`);
    console.log(`   - Message: ${response3.data.message}`);
    console.log(`   - Filtres appliqu√©s:`);
    Object.entries(response3.data.applied_filters).forEach(([key, values]) => {
      console.log(`     * ${key}: ${values.length > 0 ? `[${values.join(', ')}]` : 'Vide'}`);
    });

    // Test 4: Filtres avec espaces seulement
    console.log('\nüìã Test 4: Filtres avec espaces seulement');
    const response4 = await axios.get(`${BASE_URL}/api/pronto/workflow/global-results`, {
      params: {
        company_filter: '   ',
        title_filter: ' , , ',
        lead_location_filter: '',
        limit: 5
      }
    });
    
    console.log('‚úÖ R√©ponse re√ßue:');
    console.log(`   - Leads filtr√©s: ${response4.data.filtered_leads}`);
    console.log(`   - Message: ${response4.data.message}`);
    console.log(`   - Filtres apr√®s nettoyage:`, response4.data.applied_filters);

    // Test 5: V√©rification que les r√©sultats sont identiques sans filtres
    console.log('\nüìã Test 5: V√©rification de coh√©rence (sans filtres vs filtres vides)');
    const response5a = await axios.get(`${BASE_URL}/api/pronto/workflow/global-results?limit=3`);
    const response5b = await axios.get(`${BASE_URL}/api/pronto/workflow/global-results?company_filter=&title_filter=&limit=3`);
    
    const sameResults = response5a.data.filtered_leads === response5b.data.filtered_leads;
    console.log(`‚úÖ Coh√©rence des r√©sultats: ${sameResults ? 'OK' : 'ERREUR'}`);
    console.log(`   - Sans param√®tres: ${response5a.data.filtered_leads} leads`);
    console.log(`   - Avec param√®tres vides: ${response5b.data.filtered_leads} leads`);

    // Test 6: Test avec limite √©lev√©e pour voir le comportement global
    console.log('\nüìã Test 6: Test avec limite √©lev√©e (comportement global)');
    const response6 = await axios.get(`${BASE_URL}/api/pronto/workflow/global-results?limit=1000`);
    
    console.log('‚úÖ R√©ponse re√ßue:');
    console.log(`   - Recherches trait√©es: ${response6.data.total_searches}`);
    console.log(`   - Leads totaux disponibles: ${response6.data.total_leads}`);
    console.log(`   - Leads retourn√©s: ${response6.data.filtered_leads}`);
    console.log(`   - Entreprises uniques: ${response6.data.unique_companies}`);
    console.log(`   - Temps de traitement: ${response6.data.processing_time}s`);

    console.log('\n‚úÖ Tous les tests des filtres vides ont r√©ussi !');
    console.log('\nüìä R√©sum√© du comportement:');
    console.log('   - Sans filtres: Tous les leads sont retourn√©s');
    console.log('   - Filtres vides: M√™me comportement que sans filtres');
    console.log('   - Filtres avec espaces: Nettoy√©s automatiquement');
    console.log('   - M√©lange: Seuls les filtres non vides sont appliqu√©s');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
    
    if (error.response) {
      console.error(`   - Statut HTTP: ${error.response.status}`);
      console.error(`   - URL: ${error.config?.url}`);
      console.error(`   - Param√®tres: ${JSON.stringify(error.config?.params || {})}`);
      
      if (error.response.data) {
        console.error(`   - D√©tails de l'erreur:`, error.response.data);
      }
    }
  }
}

// Test de connectivit√© de base
async function testConnectivity() {
  try {
    console.log('üîç Test de connectivit√©...');
    const response = await axios.get(`${BASE_URL}/api/pronto/status`);
    console.log('‚úÖ Serveur accessible');
    return true;
  } catch (error) {
    console.error('‚ùå Serveur non accessible:', error.message);
    console.error('   Assurez-vous que le serveur backend est d√©marr√© sur le port 4000');
    return false;
  }
}

// Fonction principale
async function main() {
  const isConnected = await testConnectivity();
  if (isConnected) {
    await testEmptyFilters();
  }
}

// Ex√©cution
main().catch(console.error);
